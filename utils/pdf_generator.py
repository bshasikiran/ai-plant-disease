from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime
import os
import logging

logger = logging.getLogger(__name__)

class PDFGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            textColor=colors.HexColor('#2E7D32'),
            alignment=TA_CENTER
        )
    
    def generate_report(self, disease, treatment, confidence):
        """Generate PDF report"""
        try:
            # Create reports directory if it doesn't exist
            os.makedirs('reports', exist_ok=True)
            
            filename = f"reports/agrisage_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            doc = SimpleDocTemplate(filename, pagesize=A4)
            
            elements = []
            
            # Title
            title = Paragraph("AgriSage - Crop Disease Report", self.title_style)
            elements.append(title)
            elements.append(Spacer(1, 0.5*inch))
            
            # Date
            date_text = Paragraph(f"Generated on: {datetime.now().strftime('%B %d, %Y')}", 
                                 self.styles['Normal'])
            elements.append(date_text)
            elements.append(Spacer(1, 0.3*inch))
            
            # Disease Information
            disease_title = Paragraph("Disease Detected", self.styles['Heading2'])
            elements.append(disease_title)
            
            disease_info = [
                ['Disease Name:', disease],
                ['Confidence Level:', f"{confidence}%"],
                ['Risk Level:', 'High' if confidence > 80 else 'Medium']
            ]
            
            disease_table = Table(disease_info, colWidths=[2*inch, 4*inch])
            disease_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.grey),
            ]))
            elements.append(disease_table)
            elements.append(Spacer(1, 0.3*inch))
            
            # Treatment Recommendations
            treatment_title = Paragraph("Treatment Recommendations", self.styles['Heading2'])
            elements.append(treatment_title)
            elements.append(Spacer(1, 0.2*inch))
            
            if treatment:
                # Organic Treatment
                organic_title = Paragraph("Organic Treatment:", self.styles['Heading3'])
                elements.append(organic_title)
                organic_text = Paragraph(treatment.get('organic', 'Not available'), 
                                        self.styles['Normal'])
                elements.append(organic_text)
                elements.append(Spacer(1, 0.2*inch))
                
                # Chemical Treatment
                chemical_title = Paragraph("Chemical Treatment:", self.styles['Heading3'])
                elements.append(chemical_title)
                chemical_text = Paragraph(treatment.get('chemical', 'Not available'), 
                                         self.styles['Normal'])
                elements.append(chemical_text)
                elements.append(Spacer(1, 0.2*inch))
                
                # Prevention
                prevention_title = Paragraph("Prevention Methods:", self.styles['Heading3'])
                elements.append(prevention_title)
                prevention_text = Paragraph(treatment.get('prevention', 'Not available'), 
                                          self.styles['Normal'])
                elements.append(prevention_text)
            
            # Footer
            elements.append(Spacer(1, 0.5*inch))
            footer = Paragraph("Generated by AgriSage - Your AI Farming Assistant", 
                             self.styles['Normal'])
            elements.append(footer)
            
            # Build PDF
            doc.build(elements)
            
            return filename
            
        except Exception as e:
            logger.error(f"Error generating PDF: {str(e)}")
            raise